@model List<Favorite>

<main id="site__main" class="p-2.5 h-[calc(100vh-var(--m-top))] mt-[--m-top] xl:ml-[--w-side-sm] 2xl:ml-[--w-side]">
    <div class="gap-12 mx-auto max-w-[1065px] lg:flex 2xl:gap-16" id="js-oversized">
        <div class="mx-auto max-w-[680px]">
            <div class="space-y-3 mx-auto flex-1 md:max-w-[580px] xl:space-y-6">
                @if (Model.Count == 0)
                {
                    <div class="bg-white p-2 space-y-4 border1 rounded-xl text-sm font-medium shadow-sm md:p-4" style="width: 580px;">
                        Currently, there are no favorited posts available.
                    </div>
                }
                else
                {
                    @foreach (var favorite in Model)
                    {
                        <partial name="_Post" model="favorite.Post" view-data='new ViewDataDictionary(ViewData) { { "ShowAllComment", false } }' />
                    }
                }
            </div>
        </div>
        <div class="flex-1">
            <div class="sm:grid-cols-2 lg:space-y-4 lg:pb-8 max-lg:grid max-lg:gap-6">
                <div class="box p-5 px-6">
                    @await Component.InvokeAsync("SuggestedFriends")
                </div>
                <div class="box p-5 px-6 border1">
                    @await Component.InvokeAsync("Hashtag")
                </div>
            </div>
        </div>
    </div>
</main>

<partial name="_PostDeleteConfirmation" />

<script>
    function openPostDeleteConfirmation(postId) {
        console.log('Selected post id - ', postId);
        UIkit.dropdown('.post-options-dropdown').hide();
        document.getElementById('postId').value = postId;
        UIkit.modal('#postDeleteDialog').show();
    }

    document.addEventListener('DOMContentLoaded', function () {
        const postsContainer = document.querySelector('.space-y-3.mx-auto.flex-1.md\\:max-w-\\[580px\\].xl\\:space-y-6');

        // Reusable function to handle fetch and replace post container
        function updatePostContainer(form, postContainer) {
            return fetch(form.action, {
                method: 'POST',
                body: new FormData(form),
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.text();
            })
            .then(html => {
                const temp = document.createElement('div');
                temp.innerHTML = html.trim();
                const newPost = temp.firstElementChild;
                postContainer.replaceWith(newPost);
                // Reset form if it's an add-comment-form
                if (form.classList.contains('add-comment-form')) {
                    form.reset();
                }
            })
            .catch(error => {
                console.error('Error:', error);
                UIkit.notification({
                    message: 'An error occurred while processing your request.',
                    status: 'danger',
                    pos: 'top-center'
                });
            });
        }

        // Handle like/favorite button clicks
        postsContainer.addEventListener('click', function (event) {
            const button = event.target.closest('.like-button, .favorite-button');
            if (button) {
                event.preventDefault();
                const form = button.closest('form');
                const postId = form.querySelector('input[name="postId"]').value;
                const postContainer = document.getElementById('post-' + postId);
                updatePostContainer(form, postContainer);
            }
        });

        // Handle form submissions for comments
        postsContainer.addEventListener('submit', function (event) {
            const form = event.target;
            if (form.classList.contains('add-comment-form') || form.classList.contains('remove-comment-form')) {
                event.preventDefault();
                const postId = form.querySelector('input[name="postId"]').value;
                const postContainer = document.getElementById('post-' + postId);
                updatePostContainer(form, postContainer);
            }
        });

        // Handle delete post form submission
        document.addEventListener('submit', function (event) {
            const form = event.target;
            if (form.classList.contains('delete-post-form')) {
                event.preventDefault();
                const postId = form.querySelector('input[name="postId"]').value;
                const postContainer = document.getElementById('post-' + postId);
                fetch(form.action, {
                    method: 'POST',
                    body: new FormData(form),
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    // Remove the post container from the DOM
                    if (postContainer) {
                        postContainer.remove();
                    }
                    UIkit.modal('#postDeleteDialog').hide();
                })
                .catch(error => {
                    console.error('Error:', error);
                    UIkit.notification({
                        message: 'An error occurred while deleting the post.',
                        status: 'danger',
                        pos: 'top-center'
                    });
                });
            }
        });
    });
</script>