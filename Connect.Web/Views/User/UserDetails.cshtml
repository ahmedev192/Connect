@using Connect.Web.ViewModels
@model UserProfileViewModel

<main id="site__main" class="p-2.5 h-[calc(100vh-var(--m-top))] mt-[--m-top] xl:ml-[--w-side-sm] 2xl:ml-[--w-side]">
    <div class="mx-auto max-w-[1065px] max-lg:-m-2.5">
        <div class="bg-white shadow lg:rounded-b-xl lg:-mt-10">
            <div class="h-8 relative w-full overflow-hidden lg:h-8"></div>
            <div class="p-3 flex flex-row items-center">
                <div class="mr-4 flex-shrink-0">
                    <div class="w-28 h-28 relative lg:h-28 lg:w-28">
                        <div class="border-gray-100 relative shrink-0 overflow-hidden rounded-full md:border-[6px]">
                            <img src="@Model.User.ProfilePictureUrl" class="inset-0 h-full w-full object-cover" />
                        </div>
                    </div>
                </div>
                <div>
                    <h3 class="text-black text-base font-bold md:text-3xl">@Model.User.FullName</h3>
                    <p class="mt-2 text-gray-500">@Model.User.UserName</p>
                </div>
            </div>
        </div>
        <div class="gap-10 mt-8 flex 2xl:gap-12 max-lg:flex-col" id="js-oversized">
            <div class="space-y-3 flex-1 xl:space-y-6" id="posts-container">
                @foreach (var post in Model.Posts)
                {
                    <partial name="_Post" model="post"
                             view-data='new ViewDataDictionary(ViewData)
                                                      {
                                                          { "ShowAllComment", false },
                                                          { "ShowDetails", true }
                                                      }' />
                                }
            </div>
            <div class="lg:w-[400px]">
                <div class="sm:grid-cols-2 lg:space-y-4 lg:pb-8 max-lg:grid max-lg:gap-6"
                     uk-sticky="media: 1024; end: #js-oversized; offset: 80">
                    <div class="box p-5 px-6">
                        <div class="items-ce text-black flex justify-between">
                            <h3 class="text-lg font-bold">
                                Friends
                                <span class="text-gray-500 mt-0 block text-sm font-normal">@Model.Friends.Count friends</span>
                            </h3>
                        </div>
                        <div class="gap-2 gap-y-5 mt-4 mb-2 grid grid-cols-3 text-center text-sm">
                            @foreach (var friend in Model.Friends.Take(6))
                            {
                                <div>
                                    <div class="relative aspect-square w-full overflow-hidden rounded-lg">
                                        <img src="@friend.ProfilePictureUrl" class="inset-0 h-full w-full object-cover" />
                                    </div>
                                    <div class="mt-2 line-clamp-1">
                                        <a asp-controller="User" asp-action="UserDetails" asp-route-userId="@friend.FriendId">@friend.FullName</a>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Post Delete Confirmation Modal -->
    <div id="postDeleteDialog" uk-modal>
        <div class="uk-modal-dialog uk-modal-body">
            <h2 class="uk-modal-title">Confirm Delete</h2>
            <p>Are you sure you want to delete this post?</p>
            <form asp-controller="Post" asp-action="DeletePost" method="post" class="delete-post-form">
                <input type="hidden" name="postId" id="deleteConfirmationPostId" />
                <div class="uk-modal-footer uk-text-right">
                    <button class="uk-button uk-button-default uk-modal-close" type="button">Cancel</button>
                    <button class="uk-button uk-button-danger" type="submit">Delete</button>
                </div>
            </form>
        </div>
    </div>
</main>

<script>
    function openPostDeleteConfirmation(postId) {
        UIkit.dropdown('.post-options-dropdown').hide();
        document.getElementById('deleteConfirmationPostId').value = postId;
        UIkit.modal('#postDeleteDialog').show();
    }

    document.addEventListener('DOMContentLoaded', function () {
        const postsContainer = document.querySelector('.space-y-3.flex-1.xl\\:space-y-6');

        // Reusable function to handle fetch and replace post container
        function updatePostContainer(form, postContainer) {
            return fetch(form.action, {
                method: 'POST',
                body: new FormData(form),
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.text();
            })
            .then(html => {
                const temp = document.createElement('div');
                temp.innerHTML = html.trim();
                const newPost = temp.firstElementChild;
                postContainer.replaceWith(newPost);
                // Reset form if it's an add-comment-form
                if (form.classList.contains('add-comment-form')) {
                    form.reset();
                }
            })
            .catch(error => {
                console.error('Error:', error);
                UIkit.notification({
                    message: 'An error occurred while processing your request.',
                    status: 'danger',
                    pos: 'top-center'
                });
            });
        }

        // Handle like/favorite button clicks
        postsContainer.addEventListener('click', function (event) {
            const button = event.target.closest('.like-button, .favorite-button');
            if (button) {
                event.preventDefault();
                const form = button.closest('form');
                const postId = form.querySelector('input[name="postId"]').value;
                const postContainer = document.getElementById('post-' + postId);
                updatePostContainer(form, postContainer);
            }
        });

        // Handle form submissions
        postsContainer.addEventListener('submit', function (event) {
            const form = event.target;
            if (form.classList.contains('add-comment-form') || form.classList.contains('remove-comment-form')) {
                event.preventDefault();
                const postId = form.querySelector('input[name="postId"]').value;
                const postContainer = document.getElementById('post-' + postId);
                updatePostContainer(form, postContainer);
            }
        });

        // Handle delete post form submission
        document.addEventListener('submit', function (event) {
            const form = event.target;
            if (form.classList.contains('delete-post-form')) {
                event.preventDefault();
                const postId = form.querySelector('input[name="postId"]').value;
                const postContainer = document.getElementById('post-' + postId);
                fetch(form.action, {
                    method: 'POST',
                    body: new FormData(form),
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    // Remove the post container from the DOM
                    if (postContainer) {
                        postContainer.remove();
                    }
                    UIkit.modal('#postDeleteDialog').hide();
                })
                .catch(error => {
                    console.error('Error:', error);
                    UIkit.notification({
                        message: 'An error occurred while deleting the post.',
                        status: 'danger',
                        pos: 'top-center'
                    });
                });
            }
        });
    });
</script>