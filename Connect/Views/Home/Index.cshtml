@model List<Post>

<main id="site__main" class="p-2.5 h-[calc(100vh-var(--m-top))] mt-[--m-top] xl:ml-[--w-side-sm] 2xl:ml-[--w-side]">
	<div class="gap-12 mx-auto max-w-[1065px] lg:flex 2xl:gap-16" id="js-oversized">
		<div class="mx-auto max-w-[680px]">

			@await Component.InvokeAsync("Story")

			<div class="space-y-3 mx-auto flex-1 md:max-w-[580px] xl:space-y-6">

				<div class="bg-white p-2 space-y-4 border1 rounded-xl text-sm font-medium shadow-sm md:p-4">
					<div class="gap-1 flex items-center md:gap-3">
						<div class="bg-slate-100 flex-1 cursor-pointer rounded-lg transition-all hover:bg-opacity-80" uk-toggle="target: #create-status">
							<div class="py-2.5 text-center">What do you have in mind?</div>
						</div>
						<div class="p-1 px-1.5 bg-pink-100/60 cursor-pointer rounded-xl transition-all hover:bg-opacity-80 hover:bg-pink-100" uk-toggle="target: #create-status">
							<svg xmlns="http://www.w3.org/2000/svg" class="w-8 h-8 stroke-pink-600 fill-pink-200/70" viewBox="0 0 24 24" stroke-width="1.5" stroke="#2c3e50" fill="none" stroke-linecap="round" stroke-linejoin="round">
								<path stroke="none" d="M0 0h24v24H0z" fill="none" />
								<path d="M15 8h.01" />
								<path d="M12 3c7.2 0 9 1.8 9 9s-1.8 9 -9 9s-9 -1.8 -9 -9s1.8 -9 9 -9z" />
								<path d="M3.5 15.5l4.5 -4.5c.928 -.893 2.072 -.893 3 0l5 5" />
								<path d="M14 14l1 -1c.928 -.893 2.072 -.893 3 0l2.5 2.5" />
							</svg>
						</div>
					</div>

				</div>

				<div id="posts-container" class="space-y-4">

					@if (Model.Count == 0)
					{
						<div class="bg-white p-2 space-y-4 border1 rounded-xl text-sm font-medium shadow-sm md:p-4" style="width: 580px;">
							Currently, there are no posts available. Would you like to create the first one?
						</div>
					}
					else
					{
						@foreach (var post in Model)
						{
							<partial name="_Post"
									 model="post"
									 view-data='new ViewDataDictionary(ViewData) { { "ShowAllComment", false } }' />
						}
					}
				</div>


			</div>
		</div>
		<div class="flex-1">
			<div class="sm:grid-cols-2 lg:space-y-4 lg:pb-8 max-lg:grid max-lg:gap-6">
				<div class="box p-5 px-6">
					@await Component.InvokeAsync("SuggestedFriends")
				</div>
				<div class="box p-5 px-6 border1">
					@await Component.InvokeAsync("Hashtag")
				</div>
			</div>
		</div>
	</div>
</main>

<partial name="Modals/_CreateStory" model="new Story()" />
<partial name="Modals/_CreateStatus" model="new Post()" />
<partial name="_PostDeleteConfirmation" />

<script>
	function openPostDeleteConfirmation(postId) {
		UIkit.dropdown('.post-options-dropdown').hide();
		document.getElementById('deleteConfirmationPostId').value = postId;
		UIkit.modal('#postDeleteDialog').show();
	}

	document.addEventListener('DOMContentLoaded', function () {
	  const postsContainer = document.getElementById('posts-container');

	  // Reusable function to handle fetch and replace post container
	  function updatePostContainer(form, postContainer) {
		return fetch(form.action, {
		  method: 'POST',
		  body: new FormData(form)
		})
		  .then(response => response.text())
		  .then(html => {
			const temp = document.createElement('div');
			temp.innerHTML = html.trim();
			const newPost = temp.firstElementChild;
			postContainer.replaceWith(newPost);
			// Reset form if it's an add-comment-form
			if (form.classList.contains('add-comment-form')) {
			  form.reset();
			}
		  })
		  .catch(error => {
			console.error('Error:', error);
			// Optionally, add user feedback here (e.g., alert('An error occurred'));
		  });
	  }

	  // Single event listener for both click and submit events
	  postsContainer.addEventListener('click', function (event) {
		// Handle like/favorite button clicks
		const button = event.target.closest('.like-button, .favorite-button');
		if (button) {
		  event.preventDefault();
		  const form = button.closest('form');
		  const postId = form.querySelector('input[name="postId"]').value;
		  const postContainer = document.getElementById('post-' + postId);
		  updatePostContainer(form, postContainer);
		}
	  });

	  postsContainer.addEventListener('submit', function (event) {
		const form = event.target;

		// Handle add-comment-form submissions
		if (form.classList.contains('add-comment-form')) {
		  event.preventDefault();
		  const postId = form.querySelector('input[name="postId"]').value;
		  const postContainer = document.getElementById('post-' + postId);
		  updatePostContainer(form, postContainer);
		}

		// Handle remove-comment-form submissions
		if (form.classList.contains('remove-comment-form')) {
		  event.preventDefault();
		  const postId = form.querySelector('input[name="postId"]').value;
		  const postContainer = document.getElementById('post-' + postId);
		  updatePostContainer(form, postContainer);
		}
	  });
	});

</script>