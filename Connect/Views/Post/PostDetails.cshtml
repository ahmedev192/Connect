@model Post

<main id="site__main" class="p-2.5 h-[calc(100vh-var(--m-top))] mt-[--m-top] xl:ml-[--w-side-sm] 2xl:ml-[--w-side]">
	<div class="h-full w-full" id="js-oversized">
		<div class="h-full w-full">
			@*<div class="h-full w-full">*@
			<div id="posts-container" class="space-y-4">
				<partial name="_Post" model="Model" view-data='new ViewDataDictionary(ViewData) { { "ShowAllComment", true } }' />
			</div>
		</div>
	</div>
</main>


<partial name="_PostDeleteConfirmation" />

<script>
	function openPostDeleteConfirmation(postId) {

		console.log('Selected post id - ', postId);
		UIkit.dropdown('.post-options-dropdown').hide();
		document.getElementById('postId').value = postId;
		UIkit.modal('#postDeleteDialog').show();
	}




	document.addEventListener('DOMContentLoaded', function () {
	  const postsContainer = document.getElementById('posts-container');

	  // Reusable function to handle fetch and replace post container
	  function updatePostContainer(form, postContainer) {
		return fetch(form.action, {
		  method: 'POST',
		  body: new FormData(form)
		})
		  .then(response => response.text())
		  .then(html => {
			const temp = document.createElement('div');
			temp.innerHTML = html.trim();
			const newPost = temp.firstElementChild;
			postContainer.replaceWith(newPost);
			// Reset form if it's an add-comment-form
			if (form.classList.contains('add-comment-form')) {
			  form.reset();
			}
		  })
		  .catch(error => {
			console.error('Error:', error);
			// Optionally, add user feedback here (e.g., alert('An error occurred'));
		  });
	  }

	  // Single event listener for both click and submit events
	  postsContainer.addEventListener('click', function (event) {
		// Handle like/favorite button clicks
		const button = event.target.closest('.like-button, .favorite-button');
		if (button) {
		  event.preventDefault();
		  const form = button.closest('form');
		  const postId = form.querySelector('input[name="postId"]').value;
		  const postContainer = document.getElementById('post-' + postId);
		  updatePostContainer(form, postContainer);
		}
	  });

	  postsContainer.addEventListener('submit', function (event) {
		const form = event.target;

		// Handle add-comment-form submissions
		if (form.classList.contains('add-comment-form')) {
		  event.preventDefault();
		  const postId = form.querySelector('input[name="postId"]').value;
		  const postContainer = document.getElementById('post-' + postId);
		  updatePostContainer(form, postContainer);
		}

		// Handle remove-comment-form submissions
		if (form.classList.contains('remove-comment-form')) {
		  event.preventDefault();
		  const postId = form.querySelector('input[name="postId"]').value;
		  const postContainer = document.getElementById('post-' + postId);
		  updatePostContainer(form, postContainer);
		}
	  });
	});


</script>



